<%- include('../partials/head') %>
<%- include('../partials/header') %>


    
    <style>
        /* General styles */
        body {
            font-family: Arial, sans-serif;
            background-color: #f9f9f9;
            margin: 0;
            padding: 0;
        }

        /* Header styles */
        header {
            background-color: #333;
            color: white;
            padding: 20px 0;
            text-align: center;
        }

        /* Main container styles */
        main {
            max-width: 900px;
            margin: 20px auto;
            padding: 10px;
        }

        /* Order card styles */
        .order-card {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            padding: 20px;
        }

        /* Order header styles */
        .order-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .order-header .order-info {
            display: flex;
            flex-direction: column;
        }

        .order-header .order-actions {
            display: flex;
            align-items: center; /* Align items to center */
        }

        .order-header .order-actions .btn {
            margin-left: 10px;
        }

        .order-header span {
            font-weight: bold;
        }

        .order-header .order-date {
            font-size: 0.9rem;
            color: #777;
        }

        /* Order details styles */
        .order-details {
            margin-top: 15px;
        }

        .order-details p {
            margin: 5px 0;
        }

        /* Product image styles */
        .order-details img {
            height: 100px;
            width: auto;
            margin-right: 10px;
        }

        /* Responsive styles */
        @media (max-width: 600px) {
            .order-header {
                flex-direction: column;
                align-items: flex-start;
            }
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0, 0, 0);
            background-color: rgba(0, 0, 0, 0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 10px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .order-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    margin-bottom: 20px;
    padding: 15px;
}

.order-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 15px;
}

.product-row {
    display: flex;
    margin-bottom: 15px;
}

.product-image {
    flex: 0 0 100px;
    margin-right: 15px;
}

.product-image img {
    max-width: 100%;
    height: auto;
}

.product-info {
    flex: 1;
}

.product-actions {
    display: flex;
    justify-content: flex-end;
    margin-top: 10px;
}

.btn {
    margin-left: 10px;
}

.order-summary {
    margin-top: 20px;
    border-top: 1px solid #ddd;
    padding-top: 15px;
}
    </style>


<body>
    <main>
        <div class="order-history-header">
            <a href="javascript:history.back()" class="back-button btn btn-secondary">
                Go Back
             </a>
             <br><br>
            <h1>Order History</h1>
        </div>
        <br>
        <% if (order && order.length > 0) { %>
            <% order.forEach(order => { %>
                <div class="order-card">
                    <div class="order-header">
                        <span class="order-number">Order #<%= order.orderId %></span>
                        <span class="order-date"><%= new Date(order.orderDate).toLocaleString('en-GB') %></span>
                    </div>
                   
                    <% let delStatus = order.products.some(product => { %>
                        <%return product.status === 'Delivered' %>
                        <% }) %>
                        <% let paymentFailed = order.products.some(product => product.status === 'Payment Failed') %>
                        <%= console.log(delStatus,'del status'); %>
                        <%= console.log(paymentFailed, 'Payment Failed'); %>
                        <% if(delStatus){ %>
                            <a class="btn btn-outline-warning" href="/invoice?id=<%= order.orderId %>">Invoice</a>
                            <% } %>
                        <div class="order-details">
                            <% if (paymentFailed) { %>
                                <button class="btn btn-outline-warning" onclick="retry('<%= order.orderId %>','<%= order.totalPrice %>')">Retry Payment</button>
                            <% } %>
                        <p class="user-name"><strong>User Name:</strong> <%= order.address.name %></p>
                        
                        <% order.products.forEach(product => { %>
                            <div class="product-row">
                                <div class="product-image">
                                    <img class="img-fluid" src="/productsImages/<%= product.images %>" alt="Product Image">
                                </div>
                                <div class="product-info">
                                    <p><strong>Product Name:</strong> <%= product.name %></p>
                                    <p><strong>Item:</strong> ₹ <%= product.price %></p>
                                    <p><strong>Quantity:</strong> <%= product.quantity %></p>
                                    <p><strong>Total:</strong> ₹ <%= product.price * product.quantity %></p>
                                    <p><strong>Status:</strong> 
                                        <span class="<%= product.status === 'Order Cancelled' ? 'text-danger' : '' %>">
                                            <%= product.status %>
                                        </span>
                                    </p>
                                </div>
                            </div>
                            
                            <div class="product-actions">
                                <% if (product.status === 'Returned' && product.returnStatus === 'APPROVE') { %>
                                    <h4 class="text-success">Product Returned Successfully</h4>
                                <% } else if (product.status === 'Delivered' && product.returnStatus === 'REJECTED') { %>
                                    <h4 class="text-danger">Product Rejected</h4>
                                    <!-- <a class="btn btn-outline-warning" href="/invoice?id=<%#= order.orderId %>">Invoice</a> -->
                                <% } else if (product.status === 'Delivered') { %>
                                    <button class="btn btn-danger" onclick="showReturnModal('<%= order.orderId %>', '<%= product.productId %>')">Return Order</button>
                                    <!-- <a class="btn btn-outline-warning" href="/invoice?id=<%#= order.orderId %>&productId=<%= product.productId %>">Invoice</a> -->
                                <% } else if (product.status === 'Order Placed' || product.status === 'Shipping') { %>
                                    <button class="btn btn-danger" onclick="cancelOrder('<%= order.orderId %>', '<%= product.productId %>')">Cancel Order</button>
                                <% } %>
                            </div>
                        <% }) %>
                        
                        <div class="order-summary">
                            <p><strong>Delivery Address:</strong> <%= order.address.address %>, <%= order.address.city %></p>
                            <p><strong>Payment method:</strong> <%= order.paymentMethod %></p>
                            <p><strong>Grand Total:</strong> ₹ <%= order.totalPrice %></p>
                            <% if (order.discountAmount) { %>
                                <p><strong>Discount Amount:</strong> ₹ <%= order.discountAmount %></p>
                            <% } %>
                        </div>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <p>No orders found.</p>
        <% } %>

        <!-- Pagination -->
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                    <a class="page-link" href="/ordersHistory?page=<%= currentPage - 1 %>&limit=<%= limit %>" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                        <a class="page-link" href="/ordersHistory?page=<%= i %>&limit=<%= limit %>"><%= i %></a>
                    </li>
                <% } %>
                <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                    <a class="page-link" href="/ordersHistory?page=<%= currentPage + 1 %>&limit=<%= limit %>" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    </main>

    <div id="returnModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Return Order</h2>
            <form id="returnForm">
                <input type="hidden" id="orderId">
                <input type="hidden" id="productId">
                <div class="form-group">
                    <label for="reason">Reason for return:</label>
                    <textarea id="reason" class="form-control" rows="4" required></textarea>
                </div>
                <button type="button" class="btn btn-primary" onclick="submitReturn()">Submit</button>
            </form>
        </div>
    </div>

    <%- include('../partials/footer') %>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+8vLvZG8+2e5UzH3cgTk6tIQJp7tS"
        crossorigin="anonymous"></script>
</body>
<script>
  async  function retry(orderId,orderAmount){
        try {
                const response = await fetch(`/razorpay?amount=${orderAmount}`);
                if (!response.ok) {
                    throw new Error('Failed to create order');
                }

                const orders = await response.json();
                const options = {
                    key: 'rzp_test_vaUKH55kwbh0HR',
                    amount: orders.amount,
                    currency: orders.currency,
                    orders_id: orders.id,
                    name: 'METRIX',
                    description: 'Test Payment',
                    image: 'https://via.placeholder.com/150',
                    handler: function (response) {
                        Swal.fire({
                            title: 'Payment Successful!',
                            html: `<p>Payment ID: <strong>${response.razorpay_payment_id}</strong></p>
                                 <p>Amount: <strong>${orders.amount / 100}</strong> ${orders.currency}</p>`,
                            icon: 'success',
                            timer: 3500,
                        }).then(() => {
                            razorpaySuccess(orderId,orders);
                        });
                    },
                    prefill: {
                        name: 'Arshad T P',
                        email: 'arshadtp89@gmail.com',
                        contact: '7909102569'
                    },
                    theme: {
                        color: '#528FF0'
                    }
                };

                const razorpayInstance = new Razorpay(options);

                razorpayInstance.on('payment.failed', function (response) {
                    Swal.fire({
                        title: 'Payment Failed',
                        text: 'There was an error processing your payment. Redirecting to order history...',
                        icon: 'error',
                        timer: 3000,
                        timerProgressBar: true,
                        willClose: () => {
                            // location.href = '/ordersHistory';
                            razorpayFailed(orders)
                        }
                    });
                });
                razorpayInstance.open();

                function razorpaySuccess(orderId) {

                    fetch(`/addOrderFailedToSuccess?orderId=${orderId}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.result === 'success') {
                                Swal.fire("Order placed successfully").then(() => {
                                    location.href = '/orderPlaced';
                                });
                            } else if (data.result === 'error') {
                                Swal.fire('Stock limit exceeded').then(() => {
                                    location.reload();
                                });
                            }
                        })
                        .catch(error => {
                            console.error('There was a problem with the fetch operation:', error);
                        });
                }

                // function razorpayFailed(orders) {
                //     fetch(`/addOrderFailed?cartId=${cartId}&paymentMethod=Online Delivery&addressId=${selectedAddressId}`)
                //         .then(response => response.json())
                //         .then(data => {
                //             if (data.result === 'success') {
                                
                //                     location.href = '/retryPayment';
                               
                //             } else if (data.result === 'error') {
                //                 Swal.fire('Stock limit exceeded').then(() => {
                //                     location.reload();
                //                 });
                //             }
                //         })
                //         .catch(error => {
                //             console.error('There was a problem with the fetch operation:', error);
                //         });
                // }
            } catch (error) {
                console.log(error, 'error is showing');
            }
    }
</script>
<script>
    async function cancelOrder(orderId, productId) {
        const confirmation = await Swal.fire({
            title: "Are you sure you want to cancel the order?",
            text: "",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#3085d6",
            cancelButtonColor: "#d33",
            confirmButtonText: "Yes, confirm it!"
        });

        if (confirmation.isConfirmed) {
            fetch(`/cancelOrder?orderId=${orderId}&productId=${productId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.result === 'success') {
                        Swal.fire({
                            title: "Order Cancelled",
                            text: "Your order has been successfully cancelled.",
                            icon: "success"
                        }).then(() => {
                            location.reload();
                        });
                    }
                })
                .catch(error => {
                    console.error('Error cancelling order:', error);
                    Swal.fire({
                        title: "Error",
                        text: "There was an issue cancelling your order. Please try again.",
                        icon: "error"
                    });
                });
        }
    }
</script>

<script>
    function showReturnModal(orderId, productId) {
        document.getElementById('orderId').value = orderId;
        document.getElementById('productId').value = productId;
        document.getElementById('returnModal').style.display = 'block';
    }

    function closeModal() {
        document.getElementById('returnModal').style.display = 'none';
    }

    async function submitReturn() {
        const orderId = document.getElementById('orderId').value;
        const productId = document.getElementById('productId').value;
        const reason = document.getElementById('reason').value;

        if (reason) {
            try {
                const response = await fetch('/orderReturn', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ orderId, productId, reason })
                });
                const data = await response.json();
                if (data.result === 'success') {
                    alert('Return reason submitted successfully');
                    closeModal();
                    location.reload();
                } else {
                    alert('Error submitting return reason');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error submitting return reason');
            }
        } else {
            alert('Please enter a reason for the return');
        }
    }
</script>

</html>
